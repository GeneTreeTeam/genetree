{"ast":null,"code":"import _classCallCheck from \"/Users/jonVan/Desktop/GitHub/genetree/backend/tempfolder/tempapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jonVan/Desktop/GitHub/genetree/backend/tempfolder/tempapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport firebase from './firebase'; // Frontend uses JS instead of JSON now\n// id:user_email\n// |-people\n// | |-id:0\n// | | |name:user_name\n// | | |email:user_email\n// | |-id:mother_id\n// | | |-name:mother_name\n// | |-id:father_id\n// | | |-name:father_name\n// | |-id:sibling_id\n// |   |-sibling_name\n// |-relationships\n//   |-id:r1_id\n//   | |-type:'mother'\n//   | |-child:0\n//   | |-parent:mother_id\n//   |-id:r2_id\n//   | |-type:'father'\n//   | |-child:0\n//   | |-parent:father_id\n//   |-id:r1_id\n//   | |-type:'mother'\n//   | |-child:sibling_id\n//   | |-parent:mother_id\n//   |-id:r1_id\n//     |-type:'father'\n//     |-child:sibling_id\n//     |-parent:father_id\n\nfunction user() {\n  return firebase.auth().currentUser;\n}\n\nfunction db() {\n  return firebase.firestore().collection('users');\n}\n\nfunction entry() {\n  return db().doc(user().email);\n}\n\nvar Person =\n/*#__PURE__*/\nfunction () {\n  function Person(people, name, email, id) {\n    _classCallCheck(this, Person);\n\n    //id supplied must be unique\n    this.mother = null;\n    this.father = null;\n    this.children = [];\n    this.name = info.name;\n    this.email = info.email;\n    this.id = info.id;\n    people[this.id] = this;\n  }\n\n  _createClass(Person, [{\n    key: \"getMother\",\n    value: function getMother() {\n      return this.mother;\n    }\n  }, {\n    key: \"getFather\",\n    value: function getFather() {\n      return this.father;\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren() {\n      return this.children;\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return this.name;\n    }\n  }, {\n    key: \"getEmail\",\n    value: function getEmail() {\n      return this.email;\n    }\n  }, {\n    key: \"getID\",\n    value: function getID() {\n      return this.id;\n    } //set relationships\n\n  }, {\n    key: \"setMother\",\n    value: function setMother(mother) {\n      if (self.mother !== mother) {\n        if (self.mother) {\n          self.mother.removeChild(self);\n        }\n\n        if (mother) {\n          mother.addChild(self);\n        }\n\n        self.mother = mother;\n      }\n    }\n  }, {\n    key: \"setFather\",\n    value: function setFather(father) {\n      if (self.father !== father) {\n        if (self.father) {\n          self.father.removeChild(self);\n        }\n\n        if (father) {\n          father.addChild(self);\n        }\n\n        self.father = father;\n      }\n    }\n  }, {\n    key: \"setAsMother\",\n    value: function setAsMother(child) {\n      child.setMother(this);\n    }\n  }, {\n    key: \"setAsFather\",\n    value: function setAsFather(child) {\n      child.setFather(this);\n    } //Remove this Person from all relationships(via children) AND database.\n\n  }, {\n    key: \"remove\",\n    value: function remove(people) {\n      //delete person\n      for (child in this.children) {\n        if (child.getMother() === this) {\n          child.setMother(null);\n        } else if (child.getFather() === this) {\n          child.setFather(null);\n        }\n      }\n\n      mother.removeChild(this);\n      father.removeChild(this);\n\n      if (people) {\n        people.remove(this.id);\n      }\n    } //Only creates child does not set relationship (external use complex so avoid)\n\n  }, {\n    key: \"addChild\",\n    value: function addChild(child) {\n      for (c in children) {\n        if (c === child) {\n          //checks existing children for duplicacy\n          return false;\n        }\n      }\n\n      children.push(child);\n      return true;\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(child) {\n      for (var i = 0; i < children.length; i++) {\n        if (children[i] == child) {\n          children.splice(i, 1);\n          return true;\n        }\n      }\n\n      return false; //child not found\n    }\n  }]);\n\n  return Person;\n}();\n\nexport { Person as default };\nexport var read = function read() {\n  //assuming already logged in\n  return entry().get().then(function (doc) {\n    var people = {};\n    var id = 0;\n\n    for (pinfo in doc.data().people) {\n      people[id] = Person(people, pinfo.name, pinfo.email, id);\n      id++;\n    }\n\n    var relationships = [];\n\n    for (rinfo in doc.data().relationships) {\n      switch (rinfo.type) {\n        case 'mother':\n          people[rinfo.child].setMother(people[rinfo.parent]);\n          break;\n\n        case 'father':\n          people[rinfo.child].setFather(people[rinfo.parent]);\n          break;\n\n        default:\n          console.warn('Unrecognized relationship: ' + rinfo.type);\n      }\n    }\n\n    return people;\n  });\n}; //Function to create new user who is member (non memebers created using addChild)\n\nexport var signUp = function signUp(username, email, password) {\n  firebase.auth().createUserWithEmailAndPassword(email, password);\n  console.log(\"It made me.\");\n  var ppl = {};\n  ppl[0] = {\n    name: username,\n    email: email\n  };\n  db().doc(email).set({\n    people: ppl,\n    relationships: {}\n  });\n};\nexport var logIn = function logIn(email, password) {\n  return firebase.auth().signInWithEmailAndPassword(email, password);\n};\nexport var logOut = function logOut() {\n  return firebase.auth().signOut();\n}; // Function to reset password if forgotten\n\nexport var pwdReset = function pwdReset(email) {\n  return firebase.auth().sendPasswordResetEmail(email);\n}; // Function to change password assuming logged in\n\nexport var pwdChange = function pwdChange(password) {\n  return user().updatePassword(password);\n}; //Write member info to database\n\nexport var write = function write(people) {\n  var rels = {};\n  var ppl = {};\n\n  for (person in people) {\n    mother = person.getMother();\n\n    if (mother) {\n      //if has mother\n      relate(i, 'mother', person.getID(), mother.getID(), rels);\n    }\n\n    father = person.getFather();\n\n    if (father) {\n      //if has a father\n      relate(i, 'father', person.getID(), father.getID(), rels);\n    }\n\n    for (child in person.getChildren()) {\n      if (child.getMother() === person) {\n        // if is mother\n        relate('mother', child.getID(), person.getID(), rels);\n      } else if (child.getFather() == person) {\n        // if is father\n        relate('father', child.getID(), person.getID(), rels);\n      }\n    }\n\n    ppl[person.id] = {\n      name: person.name,\n      email: person.email\n    };\n  }\n\n  entry().set({\n    people: ppl,\n    relationships: rels\n  });\n}; //stores type of relationship\n\nvar relate = function relate(type, childID, parentID, rels) {\n  key = relationKeyGen(type, childID, parentID);\n\n  if (!(key in rels)) {\n    // efficiency can go stick its head in a pig\n    rels[key] = {\n      type: type,\n      child: childID,\n      parent: parentID\n    };\n  }\n}; //determines relationship\n\n\nvar relationKeyGen = function relationKeyGen(type, childID, parentID) {\n  return \"{type}:{childID}:{parentID}\";\n};","map":{"version":3,"sources":["/Users/jonVan/Desktop/GitHub/genetree/backend/tempfolder/tempapp/src/firebase_example/people.js"],"names":["firebase","user","auth","currentUser","db","firestore","collection","entry","doc","email","Person","people","name","id","mother","father","children","info","self","removeChild","addChild","child","setMother","setFather","getMother","getFather","remove","c","push","i","length","splice","read","get","then","pinfo","data","relationships","rinfo","type","parent","console","warn","signUp","username","password","createUserWithEmailAndPassword","log","ppl","set","logIn","signInWithEmailAndPassword","logOut","signOut","pwdReset","sendPasswordResetEmail","pwdChange","updatePassword","write","rels","person","relate","getID","getChildren","childID","parentID","key","relationKeyGen"],"mappings":"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","sourcesContent":["import firebase from './firebase'\n// Frontend uses JS instead of JSON now\n\n// id:user_email\n// |-people\n// | |-id:0\n// | | |name:user_name\n// | | |email:user_email\n// | |-id:mother_id\n// | | |-name:mother_name\n// | |-id:father_id\n// | | |-name:father_name\n// | |-id:sibling_id\n// |   |-sibling_name\n// |-relationships\n//   |-id:r1_id\n//   | |-type:'mother'\n//   | |-child:0\n//   | |-parent:mother_id\n//   |-id:r2_id\n//   | |-type:'father'\n//   | |-child:0\n//   | |-parent:father_id\n//   |-id:r1_id\n//   | |-type:'mother'\n//   | |-child:sibling_id\n//   | |-parent:mother_id\n//   |-id:r1_id\n//     |-type:'father'\n//     |-child:sibling_id\n//     |-parent:father_id\n\n\nfunction user() {\n  return firebase.auth().currentUser\n}\nfunction db() {\n  return firebase.firestore().collection('users')\n}\nfunction entry() {\n  return db().doc(user().email)\n}\n\n\nexport default class Person {\n  constructor(people, name, email, id) { //id supplied must be unique\n    this.mother = null\n    this.father = null\n    this.children = []\n    this.name = info.name\n    this.email = info.email\n    this.id = info.id\n\n    people[this.id] = this\n  }\n\n  getMother() {\n    return this.mother\n  }\n  getFather() {\n    return this.father\n  }\n  getChildren() {\n    return this.children\n  }\n  getName() {\n    return this.name\n  }\n  getEmail() {\n    return this.email\n  }\n  getID() {\n    return this.id\n  }\n\n  //set relationships\n\n  setMother(mother) {\n    if (self.mother !== mother) {\n      if (self.mother) {\n        self.mother.removeChild(self)\n      }\n      if (mother) {\n        mother.addChild(self)\n      }\n      self.mother = mother\n    }\n  }\n  setFather(father) {\n    if (self.father !== father) {\n      if (self.father) {\n        self.father.removeChild(self)\n      }\n      if (father) {\n        father.addChild(self)\n      }\n      self.father = father\n    }\n  }\n  setAsMother(child) {\n    child.setMother(this)\n  }\n  setAsFather(child) {\n    child.setFather(this)\n  }\n  //Remove this Person from all relationships(via children) AND database.\n  remove(people) {    //delete person\n    for (child in this.children) {\n      if (child.getMother() === this) {\n        child.setMother(null)\n      } else if (child.getFather() === this) {\n        child.setFather(null)\n      }\n    }\n    \n    mother.removeChild(this)\n    father.removeChild(this)\n    \n    if (people) {\n      people.remove(this.id)\n    }\n  }\n\n  //Only creates child does not set relationship (external use complex so avoid)\n  addChild(child) {\n    for (c in children) {\n      if (c === child) {  //checks existing children for duplicacy\n        return false\n      }\n    }\n    children.push(child)\n    return true\n  }\n  removeChild(child) {\n    for (var i = 0; i < children.length; i ++) {\n      if (children[i] == child) {\n        children.splice(i, 1)\n        return true\n      }\n    }\n    return false //child not found\n  }\n}\n\nexport const read = () => {   //assuming already logged in\n  return entry().get().then(function(doc) {\n    var people = {}\n    var id = 0\n    for (pinfo in doc.data().people) {\n      people[id] = Person(people, pinfo.name, pinfo.email, id)\n      id++\n    }\n    var relationships = []\n    for (rinfo in doc.data().relationships) {\n      switch(rinfo.type) {\n        case 'mother':\n          people[rinfo.child].setMother(people[rinfo.parent])\n          break;\n        case 'father':\n          people[rinfo.child].setFather(people[rinfo.parent])\n          break;\n        default:\n          console.warn('Unrecognized relationship: '+rinfo.type)\n      }\n    }\n    return people\n  })\n}\n\n\n//Function to create new user who is member (non memebers created using addChild)\nexport const signUp = (username, email, password) => {\n  firebase.auth().createUserWithEmailAndPassword(email, password)\n  console.log(\"It made me.\")\n  var ppl = {}\n  ppl[0] = {name: username, email: email}\n  db().doc(email).set({\n    people: ppl,\n    relationships: {}\n  })\n}\n\nexport const logIn = (email, password) =>\n  firebase.auth().signInWithEmailAndPassword(email, password)\n\n\nexport const logOut = () =>\n  firebase.auth().signOut()\n\n// Function to reset password if forgotten\nexport const pwdReset = (email) =>\n  firebase.auth().sendPasswordResetEmail(email)\n\n// Function to change password assuming logged in\nexport const pwdChange = (password) =>\n  user().updatePassword(password)\n\n//Write member info to database\nexport const write = (people) => {\n  var rels = {}\n  var ppl = {}\n  for (person in people) {\n    mother = person.getMother()\n    if (mother) { //if has mother\n      relate(i, 'mother', person.getID(), mother.getID(), rels)\n    }\n    father = person.getFather()\n    if (father) { //if has a father\n      relate(i, 'father', person.getID(), father.getID(), rels)\n    }\n    for (child in person.getChildren()) {\n      if (child.getMother() === person) { // if is mother\n        relate('mother', child.getID(), person.getID(), rels)\n      } else if (child.getFather() == person) { // if is father\n        relate('father', child.getID(), person.getID(), rels)\n      }\n    }\n    ppl[person.id] = {name: person.name, email: person.email}\n  }\n  entry().set({people: ppl, relationships: rels})\n}\n\n//stores type of relationship\nconst relate = (type, childID, parentID, rels) => {\n  key = relationKeyGen(type, childID, parentID)\n  if (!(key in rels)) { // efficiency can go stick its head in a pig\n    rels[key] = {type: type, child: childID, parent: parentID}\n  }\n}\n\n//determines relationship\nconst relationKeyGen = (type, childID, parentID) => {\n  return `{type}:{childID}:{parentID}`\n}\n"]},"metadata":{},"sourceType":"module"}